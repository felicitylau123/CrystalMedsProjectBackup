@* @page "/cartpage"
@using CrystalMeds.Client.Static;
@using CrystalMeds.Shared.Domain;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.JSInterop;
@using System.Net.Http.Json;
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject NavigationManager Navigation

<h3>Shopping Cart</h3>

@if (CartItems == null)
{
    <p>Your shopping cart is empty.</p>

}
else
{
    <table class="table table-responsive" id="cartitemTable">
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Price</th>
                <th>Quantity</th>
        <th>Total</th>
               @*  <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in CartItems)
            {
                <tr>
                     <td>@item.ProductName</td>
                    <td>@item.ProductPrice.ToString("C")</td>
                    <td>
                        <input type="number" min="1" max="100" @bind="item.Quantity" />
                    </td>
                    <td>@(item.ProductPrice * item.Quantity).ToString("C")</td>
                   
                    <td>
                        <a href="/customers/view/@item.CartItemId" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/customers/edit/@item.CartItemId" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(item.CartItemId))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>


            }
        </tbody>
    </table>


} 
@* 
            @foreach (var item in cartItem)
            {
                <tr>
                    <td>@item.ProductName</td>
                    <td>@item.ProductPrice.ToString("C")</td>
                    <td>
                        <input type="number" min="1" max="100" @bind="item.Quantity" />
                    </td>
                    <td>@(item.ProductPrice * item.Quantity).ToString("C")</td>
                    <td>
                        <button class="btn btn-danger" @onclick="(() => RemoveFromCart(item.CartItemId))">Remove</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div>
        <h5>Total: @CalculateTotal().ToString("C")</h5>
        <button class="btn btn-primary" @onclick="Checkout">Checkout</button>
    </div> 
}
else
{
    <p>Your shopping cart is empty.</p>
}
 *@









@* 

@code {
    private List<CartItem> CartItems;


    async Task Delete(int CartItemId)
    {
        if (CartItems != null)
        {
            var cartItem = CartItems.FirstOrDefault(q => q.CartItemId == CartItemId);
            if (cartItem != null)
            {
                var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {cartItem.ProductName}?");
                if (confirm)
                {
                    await _client.DeleteAsync($"{Endpoints.CategoriesEndpoint}/{CartItemId}");
                    await OnInitializedAsync();  // Only call this if deletion is successful
                }
            }
        }
    }
    private void Checkout()
    {
        // Implement the checkout logic, e.g., navigate to a checkout page
        Navigation.NavigateTo("/checkout");
    }
}
    *@






@page "/cartpage"
@inject NavigationManager Navigation
@using CrystalMeds.Client.Static
@using CrystalMeds.Shared.Domain
@using CrystalMeds.Client.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.JSInterop
@using System.Net.Http.Json
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

@* @using CrystalMeds.Client.Static
@using CrystalMeds.Shared.Domain
@using CrystalMeds.Client.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.JSInterop
@using System.Net.Http.Json
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@implements IDisposable
@inject HttpInterceptorService _interceptor *@

<h3>Shopping Cart</h3>

@if (Products == null || Products.Count == 0)
{
    <p>Your shopping cart is empty.</p>
}
else
{
    <table class="table table-responsive" id="cartitemTable">
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Price</th>
                @* <th>Quantity</th> *@
                @* <th>Total</th> *@
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in Products)
            {
                <tr>
                    <td>@product.ProductName</td>
                    <td>@product.ProductPrice</td>

                    @*  <td><input type="number" min="1" max="100" @bind="productview.Quantity" />
                    </td>
                    <td>@(product.ProductPrice * productview.Quantity)</td> *@
                    <td>
                        <button class="btn btn-danger" @onclick="@(() => RemoveFromCart(product.ProductId))">
                            Remove
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-success" @onclick="Checkout">Checkout</button>
}

@code {

    private IList<Product>? Products;

    protected override void OnInitialized()
    {
        Products = new List<Product>
        {
            new Product { ProductId = 1, ProductName = "Crystal meds skin cleanser", ProductPrice = 15}
        };
        Products = Products.Select(item => new Product
            {
                ProductId = item.ProductId,
                ProductName = item.ProductName,
                ProductPrice = item.ProductPrice,
                
            }).ToList();
    }

    private void RemoveFromCart(int productId)
    {
        // Remove item from the cart
        var itemToRemove = Products.FirstOrDefault(item => item.ProductId == productId);
        if (itemToRemove != null)
        {
            Products.Remove(itemToRemove);
        }
    }

    private void Checkout()
    {
        Navigation.NavigateTo("/checkout");
    }
}

