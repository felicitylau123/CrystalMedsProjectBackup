@* @page "/prescriptions/"
@using CrystalMeds.Client.Static;
@using CrystalMeds.Shared.Domain;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.JSInterop;
@using System.Net.Http.Json;
@inject NavigationManager Navigation
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@implements IDisposable

<h3 class="card-title">Prescriptions</h3>
<a href="/prescriptions/create" class="btn btn-secondary">
	<span class="oi oi-plus"></span>
	Create New Prescription
</a>
@if (Prescriptions == null)
{
	<div class="alert alert-info">Loading Prescriptions...</div>
}
else
{
	<table class="table table-responsive" >
			<tr>
				<th>Patient Name</th>
				<th>Prescription</th>
				<th>Actions</th>
			</tr>
	</table>
}

@code {
	private List<Prescription>? Prescriptions;
	protected async override Task OnInitializedAsync()
	{
		Prescriptions = await _client.GetFromJsonAsync<List<Prescription>>($"{Endpoints.PrescriptionsEndpoint}");
	}
	async Task Delete(int prescriptionId)
	{
		if (Prescriptions != null)
		{
			var prescription = Prescriptions.First(q => q.PrescriptionId == prescriptionId);
			var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {prescription.PrescriptionId}?");
			if (confirm)
			{
				await _client.DeleteAsync($"{Endpoints.PrescriptionsEndpoint}/{prescriptionId}");
				await OnInitializedAsync();
			}
		}
	}
	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		await js.InvokeVoidAsync("AddDataTable", "#prescriptionsTable");
	}
	public void Dispose()
	{
		js.InvokeVoidAsync("DataTablesDispose", "#prescriptionsTable");
	}
} *@


@page "/prescriptions/"
@using CrystalMeds.Client.Static
@using CrystalMeds.Shared.Domain
@using CrystalMeds.Client.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.JSInterop
@using System.Net.Http.Json
@inject NavigationManager Navigation
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@implements IDisposable
@inject HttpInterceptorService _interceptor

<h3 class="card-title">Prescriptions</h3>
<a href="/prescriptions/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Prescription
</a>
@if (Prescriptions == null)
{
    <div class="alert alert-info">Loading Prescriptions...</div>
}
else
{
    <table class="table table-responsive" id="prescriptionsTable">
        <thead>
            <tr>
                <th>Patient ID</th>
                <th>Prescription Description</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var prescription in Prescriptions)
            {
                <tr>
                    <td>@prescription.CustomerId</td>
                    <td>@prescription.PrescriptionDescription</td>
                    <td>
                        <a href="/prescriptions/view/@prescription.PrescriptionId" class="btn btn-primary">
                            <span class="oi oi-eye"></span>
                        </a>
                        <a href="/prescriptions/edit/@prescription.PrescriptionId" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="()=>Delete(prescription.PrescriptionId)">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Prescription>? Prescriptions;

    protected override async Task OnInitializedAsync()
    {
        Prescriptions = await _client.GetFromJsonAsync<List<Prescription>>($"{Endpoints.PrescriptionsEndpoint}");
    }

    private async Task Delete(int prescriptionId)
    {
        if (Prescriptions != null)
        {
            var prescription = Prescriptions.First(q => q.PrescriptionId == prescriptionId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {prescription.PatientName}'s prescription?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.PrescriptionsEndpoint}/{prescriptionId}");
                await OnInitializedAsync();
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#prescriptionsTable");
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
        js.InvokeVoidAsync("DataTablesDispose", "#prescriptionsTable");
    }
}
