@using CrystalMeds.Client.Components
@using CrystalMeds.Shared.Domain;
@inject HttpClient _client

<EditForm Model="@prescription" OnValidSubmit="@OnValidSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Patient Name: </label>
            <div>
                <InputSelect @bind-Value="prescription.CustomerId" class="form-control">
                    <option value="">-- select patient --</option>
                    @if (Customers != null)
                    {
                        foreach (var customer in Customers)
                        {
                            <option value="@customer.CustomerId">@customer.UserName</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => prescription.PatientName)" />
            </div>
        </div>


        <div class="form-group">
            <label>Prescription Description: </label>
            <div>
                <InputText @bind-Value="prescription.PrescriptionDescription" class="form-control" />
                <ValidationMessage For="@(() => prescription.PrescriptionDescription)" />
            </div>
        </div>

        <div class="form-group">
            <label>Customer Id: </label>
            <div>
                <InputNumber @bind-Value="prescription.CustomerId" class="form-control" />
                <ValidationMessage For="@(() => prescription.CustomerId)" />
            </div>
        </div>
	</fieldset>
	@if (!Disabled){
		<button type="submit" class="btn btn-success btn-block">
		@ButtonText
	</button>
	}
	<BackToList Target="prescriptions" />
</EditForm>

@code {
	[Parameter] public bool Disabled { get; set; } = false;
	[Parameter] public Prescription? prescription { get; set; }
	[Parameter] public Customer? customer { get; set; }
	[Parameter] public string ButtonText { get; set; } = "Save";
	[Parameter] public EventCallback OnValidSubmit { get; set; }



    private IList<Customer>? Customers;


	protected async override Task OnInitializedAsync()
	{
		
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
	
}
}