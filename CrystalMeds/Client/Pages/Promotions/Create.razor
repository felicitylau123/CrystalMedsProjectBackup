@* @page "/promotions/create"
@using CrystalMeds.Shared.Domain
@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title">Create New Promotion</h3>
<hr />
<br />
<EditForm Model="@promotion" OnValidSubmit="CreatePromotion">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Promotion Name: </label>
        <div>
            <InputText @bind-Value="promotion.PromotionName" class="form-control" />
            <ValidationMessage For="@(() => promotion.PromotionName)" />
        </div>
    </div>


    <div class="form-group">
        <label>Promotion Amount: </label>
        <div>
            <InputNumber @bind-Value="promotion.PromotionAmount" class="form-control" />
            <ValidationMessage For="@(() => promotion.PromotionAmount)" />
        </div>
    </div>

    @* <div class="form-group">
        <label>Product Name: </label>
        <div>
            <InputNumber @bind-Value="promotion.ProductName" class="form-control" />
            <ValidationMessage For="@(() => promotion.ProductName)" />
        </div>
    </div> *@
@* 
    <button type="submit" class="btn btn-success btn-block">
        Create Promotion
    </button>
</EditForm>

@code {
    Promotion promotion = new Promotion();
    private IList<Promotion>? Promotions;
    private IList<Product>? Products;
    protected async override Task OnInitializedAsync()
    {
        Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
    }

    private async Task CreatePromotion()
    {
        // Ensure that the selected product is not null
        // if (promotion.ProductName != null)
        // {
        //     // Retrieve the selected product from the Products list
        //     var selectedProduct = Products.FirstOrDefault(p => p.ProductName == promotion.ProductName);

        //     // Assign the product name to the promotion
        //     promotion.ProductName = selectedProduct?.ProductName;
        // }

        await _client.PostAsJsonAsync(Endpoints.PromotionsEndpoint, promotion);
        _navManager.NavigateTo("/promotions/");
    }
} *@ 