@* @using CrystalMeds.Shared.Domain
@inject HttpClient _client

<EditForm Model="@category" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
         <label>Name: </label>
        <div>
            <InputText @bind-Value="category.CategoryName" class="form-control">
                <InputText value="">-- select name --</InputText>
            </InputText>
            <ValidationMessage For="@(() => category.CategoryName)" />
        </div>
	</div>
    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="category" />
</EditForm>


@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Category? category { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Category>? Categories;


    protected async override Task OnInitializedAsync()
    {

        Categories = await _client.GetFromJsonAsync<List<Category>>($"{Endpoints.CategoriesEndpoint}");
}
} *@
@* 
@using CrystalMeds.Shared.Domain;
@inject HttpClient _client

<EditForm Model="@category" OnValidSubmit="@OnValidSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<fieldset disabled="@Disabled">
	<div class="form-group">
		<label>Name: </label>
		<div>
				<InputText @bind-Value="category.CategoryName" class="form-control">
				<InputText value="">-- select name --</InputText>
			</InputText>
				<ValidationMessage For="@(() => category.CategoryName)" />
		</div>
	</div>

	
	</fieldset>
	@if (!Disabled){
		<button type="submit" class="btn btn-success btn-block">
		@ButtonText
	</button>
	}
	<BackToList Target="category" />
</EditForm>

@code {
	[Parameter] public bool Disabled { get; set; } = false;
	[Parameter] public Product? product { get; set; }
	[Parameter] public Category? category { get; set; }
	[Parameter] public string ButtonText { get; set; } = "Save";
	[Parameter] public EventCallback OnValidSubmit { get; set; }



	private IList<Category>? Categories;


	protected async override Task OnInitializedAsync()
	{
		
		Categories = await _client.GetFromJsonAsync<List<Category>>($"{Endpoints.CategoriesEndpoint}");
	
}
} *@

@using CrystalMeds.Client.Components
@using CrystalMeds.Shared.Domain;
@inject HttpClient _client

<EditForm Model="@category" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Category Name: </label>
            <div>
                <InputText @bind-Value="category.CategoryName" class="form-control" />
                <ValidationMessage For="@(() => category.CategoryName)" />
            </div>
        </div>
    </fieldset>
    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="category" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Category? category { get; set; }
    [Parameter] public Product? product { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Product>? Products;

     protected async override Task OnInitializedAsync()
     {
         Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
     }
}
