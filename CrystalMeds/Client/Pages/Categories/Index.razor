@page "/category/"
@using CrystalMeds.Client.Static;
@using CrystalMeds.Shared.Domain;
@using CrystalMeds.Client.Services
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.JSInterop;
@using System.Net.Http.Json;
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@implements IDisposable
@inject HttpInterceptorService _interceptor

<h3 class="card-title">Categories</h3>
<a href="/categories/create" class="btn btn-secondary">
	<span class="oi oi-plus"></span>
	Create New categories
</a>
@if (Categories == null)
{
	<div class="alert alert-info">Loading categories...</div>

}
else
{
	<table class="table table-responsive" id="categoriesTable">
		<thead>
			<tr>
				<th>CategoryName</th>
				<th>Actions</th>
			</tr>
		</thead>

		<tbody>
			@foreach (var category in Categories)
			{
				<tr>
					<td>@category.CategoryName
					</td>
					<td>
						<a href="/categories/view/@category.CategoryId" class="btn btn-primary">
							<span class="oi oi-eye"></span>
						</a>
						<a href="/categories/edit/@category.CategoryId" class="btn btn-warning">
							<span class="oi oi-pencil"></span>
						</a>
						<button class="btn btn-danger" @onclick="@(() => Delete(category.CategoryId))">
							<span class="oi oi-delete"></span>
						</button>
					</td>
				</tr>
			}
		</tbody>
	</table>


}
@code {
	private List<Category>? Categories;
	protected async override Task OnInitializedAsync()
	{
		Categories = await _client.GetFromJsonAsync<List<Category>>($"{Endpoints.CategoriesEndpoint}");
	}
	async Task Delete(int CategoryId)
	{
		if (Categories != null)
		{
			var category = Categories.First(q => q.CategoryId == CategoryId);
			var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {category.CategoryId}?");
			if (confirm)
			{
				await _client.DeleteAsync($"{Endpoints.CategoriesEndpoint}/{CategoryId}");
				await OnInitializedAsync();
			}
		}
	}
	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		await js.InvokeVoidAsync("AddDataTable", "#categoriesTable");
	}
	public void Dispose()
	{
		_interceptor.DisposeEvent();
		js.InvokeVoidAsync("DataTablesDispose", "#categoriesTable");
	}
}
