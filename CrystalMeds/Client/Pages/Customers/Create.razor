@page "/customers/create/"
@using CrystalMeds.Shared.Domain;
@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title">Create new customers</h3>
<hr />
<br />
<EditForm Model="@customer" OnValidSubmit="CreateCustomer">
	<DataAnnotationsValidator />
	<ValidationSummary />

@* 	<div class="form-group">
		<label>Customer Id: </label>
		<div>
			<InputNumber @bind-Value="customer.CustomerId" class="form-control" />
			<ValidationMessage For="@(() => customer.CustomerId)" />
		</div>
	</div> *@

	<div class="form-group">
		<label>UserName: </label>
		<div>
			<InputText @bind-Value="customer.UserName" class="form-control" />
			<ValidationMessage For="@(() => customer.UserName)" />
		</div>
	</div>

	<div class="form-group">
		<label>phone number: </label>
		<div>
			<InputText @bind-Value="customer.PhoneNumber" class="form-control" />
			<ValidationMessage For="@(() => customer.PhoneNumber)" />
		</div>
	</div>

	<div class="form-group">
		<label>Email address: </label>
		<div>
			<InputText @bind-Value="customer.Email" class="form-control" />
			<ValidationMessage For="@(() => customer.Email)" />
		</div>
	</div>
	<div class="form-group">
		<label>address: </label>
		<div>
			<InputText @bind-Value="customer.Address" class="form-control" />
			<ValidationMessage For="@(() => customer.Address)" />
		</div>
	</div>
	<button type="submit" class="btn btn-success btn-block">
		Create customer
	</button>
</EditForm>



@code {
	Customer customer = new Customer();

	private IList<Category>? Categories;
	protected async override Task OnInitializedAsync()
	{
		Categories = await _client.GetFromJsonAsync<List<Category>>($"{Endpoints.CategoriesEndpoint}");
	}

	private async Task CreateCustomer()
	{

		await _client.PostAsJsonAsync(Endpoints.CustomersEndpoint, customer);
		_navManager.NavigateTo("/customers/");
	}
}