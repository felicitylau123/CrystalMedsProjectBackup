@page "/4/"
@using CrystalMeds.Client.Static;
@using CrystalMeds.Shared.Domain;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.JSInterop;
@using System.Net.Http.Json;
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]


<h3 class="card-title">Medicines(prescription)</h3>

<table class="table">
    <thead>
        <tr>
            <th>Product Details</th>
            <th>Add to Cart</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in Products)
        {
            <tr>
                <td>
                    <h4>@product.ProductName</h4>
                    <p>Price: @product.ProductPrice</p>
                    <p>Description: @product.ProductDescription</p>
                    <!-- Add more details as needed -->
                </td>
                <td>
                    <div class="add-to-cart-form">
                        <form method="post" action="/Cart/AddToCart">
                            <input type="hidden" name="productId" value="@product.ProductId" />
                            <label for="quantity">Quantity:</label>
                            <input type="number" name="quantity" value="1" min="1" />
                            <button type="submit">Add to Cart</button>
                        </form>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Product> Products { get; set; }

    [Inject]
    private HttpClient HttpClient { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Fetch products for Category ID 1
        var categoryId = 4;
        var response = await HttpClient.GetFromJsonAsync<List<Product>>($"/api/Categories/{categoryId}/Products");

        if (response != null)
        {
            Products = response;
        }
        else
        {
            // Handle the case where products are not found
        }
    }
}