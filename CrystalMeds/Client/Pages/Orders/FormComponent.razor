@using CrystalMeds.Client.Components
@using CrystalMeds.Shared.Domain;
@inject HttpClient _client

<EditForm Model="@order" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Order Date: </label>
            <div>
                <InputDate @bind-Value="order.OrderDate" class="form-control" />
                <ValidationMessage For="@(() => order.OrderDate)" />
            </div>
        </div>

        <div class="form-group">
            <label>Total Price: </label>
            <div>
                <InputNumber @bind-Value="order.TotalPrice" class="form-control" />
                <ValidationMessage For="@(() => order.TotalPrice)" />
            </div>
        </div>

        <div class="form-group">
            <label>Product: </label>
            <div>
                <InputSelect @bind-Value="order.ProductId" class="form-control">
                    <option value="">-- select product --</option>
                    @if (Products != null)
                    {
                        foreach (var product in Products)
                        {
                            <option value="@product.ProductId">@product.ProductName</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => order.ProductId)" />
            </div>
        </div>
    </fieldset>
    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="orders" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Order? order { get; set; }
    [Parameter] public Product? product { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Product>? Products;

    protected async override Task OnInitializedAsync()
    {
        Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
    }
}
